@x
procedure initialize; {this procedure gets things started properly}
  var @<Local variables for initialization@>@/
  begin @<Initialize whatever \TeX\ might access@>@;
  end;@#
@y
@{ Pseudo-funkcje @t@>@}
function foo_link(x:integer):^integer;forward;
function foo_info(x:integer):^integer;forward;

function char_exists(x:integer):boolean;forward;
function is_char_node(x:integer):boolean;forward;
{ function global:boolean;forward;
 function terminal_input:boolean;forward;
}

{ Duza seria nowych pseudo-funkcji }
procedure foo_init;
var aaa,jjj:integer;
begin
  aaa:=1;
  for jjj:=0 to 25 do aaa:=(3*aaa+15) mod 366;
  mode:=aaa;
  head:=aaa;
  tail:=aaa;
  prev_graf:=aaa;
  aux:=aaa;
  prev_depth:=aaa;
  space_factor:=aaa;
  clang:=aaa;
  incompleat_noad:=aaa;
  mode_line:=aaa;
  top_mark:=aaa;
  first_mark:=aaa;
  bot_mark:=aaa;
  split_first_mark:=aaa;
  split_bot_mark:=aaa;
  non_char:=aaa;
  stop_flag:=aaa;
  kern_flag:=aaa;
  default_rule_thickness:=aaa;
  big_op_spacing1:=aaa;
  big_op_spacing2:=aaa;
  big_op_spacing3:=aaa;
  big_op_spacing4:=aaa;
  big_op_spacing5:=aaa;
end;
function get_strings_started:boolean;forward;
function tobar(char:integer):integer;forward;
function strprotector(x:integer):integer;forward;
function foo_char_info(x,y:integer):^four_quarters;forward;
function foo_char_width(x,y:integer):^integer;forward;
function foo_char_italic(x,y:integer):^integer;forward;
function foo_char_height(x,y:integer):^integer;forward;
function foo_char_depth(x,y:integer):^integer;forward;
function foo_char_kern(x,y:integer):^integer;forward;
function foo_slant(x:integer):^integer;forward;
function foo_space(x:integer):^integer;forward;
function foo_space_stretch(x:integer):^integer;forward;
function foo_space_shrink(x:integer):^integer;forward;
function foo_x_height(x:integer):^integer;forward;
function foo_quad(x:integer):^integer;forward;
function foo_extra_space(x:integer):^integer;forward;
function foo_math_x_height(x:integer):^integer;forward;
function foo_math_quad(x:integer):^integer;forward;
function foo_num1(x:integer):^integer;forward;
function foo_num2(x:integer):^integer;forward;
function foo_num3(x:integer):^integer;forward;
function foo_denom1(x:integer):^integer;forward;
function foo_denom2(x:integer):^integer;forward;
function foo_sup1(x:integer):^integer;forward;
function foo_sup2(x:integer):^integer;forward;
function foo_sup3(x:integer):^integer;forward;
function foo_sub1(x:integer):^integer;forward;
function foo_sub2(x:integer):^integer;forward;
function foo_sup_drop(x:integer):^integer;forward;
function foo_sub_drop(x:integer):^integer;forward;
function foo_delim1(x:integer):^integer;forward;
function foo_delim2(x:integer):^integer;forward;
function foo_axis_height(x:integer):^integer;forward;
function foo_node_size(x:integer):^integer;forward;
function foo_llink(x:integer):^integer;forward;
function foo_rlink(x:integer):^integer;forward;
function foo_type(x:integer):^integer;forward;
function foo_subtype(x:integer):^integer;forward;
function foo_font(x:integer):^integer;forward;
function foo_character(x:integer):^integer;forward;
function foo_width(x:integer):^integer;forward;
function foo_depth(x:integer):^integer;forward;
function foo_height(x:integer):^integer;forward;
function foo_shift_amount(x:integer):^integer;forward;
function foo_list_ptr(x:integer):^integer;forward;
function foo_glue_order(x:integer):^integer;forward;
function foo_glue_sign(x:integer):^integer;forward;
function foo_glue_set(x:integer):^integer;forward;
function foo_float_cost(x:integer):^integer;forward;
function foo_ins_ptr(x:integer):^integer;forward;
function foo_split_top_ptr(x:integer):^integer;forward;
function foo_mark_ptr(x:integer):^integer;forward;
function foo_adjust_ptr(x:integer):^integer;forward;
function foo_lig_ptr(x:integer):^integer;forward;
function foo_replace_count(x:integer):^integer;forward;
function foo_pre_break(x:integer):^integer;forward;
function foo_post_break(x:integer):^integer;forward;
function foo_glue_ptr(x:integer):^integer;forward;
function foo_leader_ptr(x:integer):^integer;forward;
function foo_glue_ref_count(x:integer):^integer;forward;
function foo_stretch(x:integer):^integer;forward;
function foo_shrink(x:integer):^integer;forward;
function foo_stretch_order(x:integer):^integer;forward;
function foo_shrink_order(x:integer):^integer;forward;
function foo_penalty(x:integer):^integer;forward;
function foo_glue_stretch(x:integer):^integer;forward;
function foo_glue_shrink(x:integer):^integer;forward;
function foo_span_count(x:integer):^integer;forward;
function foo_token_ref_count(x:integer):^integer;forward;
function foo_eq_level_field(x:integer):^integer;forward;
function foo_eq_type_field(x:integer):^integer;forward;
function foo_equiv_field(x:integer):^integer;forward;
function foo_eq_level(x:integer):^integer;forward;
function foo_eq_type(x:integer):^integer;forward;
function foo_equiv(x:integer):^integer;forward;
function foo_skip(x:integer):^integer;forward;
function foo_mu_skip(x:integer):^integer;forward;
function foo_glue_par(x:integer):^integer;forward;
function foo_toks(x:integer):^integer;forward;
function foo_box(x:integer):^integer;forward;
function foo_fam_fnt(x:integer):^integer;forward;
function foo_cat_code(x:integer):^integer;forward;
function foo_lc_code(x:integer):^integer;forward;
function foo_uc_code(x:integer):^integer;forward;
function foo_sf_code(x:integer):^integer;forward;
function foo_math_code(x:integer):^integer;forward;
function foo_del_code(x:integer):^integer;forward;
function foo_count(x:integer):^integer;forward;
function foo_int_par(x:integer):^integer;forward;
function foo_dimen(x:integer):^integer;forward;
function foo_dimen_par(x:integer):^integer;forward;
function foo_next(x:integer):^integer;forward;
function foo_text(x:integer):^integer;forward;
function foo_font_id_text(x:integer):^integer;forward;
function foo_save_type(x:integer):^integer;forward;
function foo_save_level(x:integer):^integer;forward;
function foo_save_index(x:integer):^integer;forward;
function foo_large_char(x:integer):^integer;forward;
function foo_location(x:integer):^integer;forward;
function foo_height_depth(x:integer):^integer;forward;
function foo_saved(x:integer):^integer;forward;
function foo_skip_byte(x:integer):^integer;forward;
function foo_next_char(x:integer):^integer;forward;
function foo_op_byte(x:integer):^integer;forward;
function foo_rem_byte(x:integer):^integer;forward;
function foo_ext_top(x:integer):^integer;forward;
function foo_ext_mid(x:integer):^integer;forward;
function foo_ext_bot(x:integer):^integer;forward;
function foo_ext_rep(x:integer):^integer;forward;
function foo_vpack(x:integer):^integer;forward;
function foo_nucleus(x:integer):^integer;forward;
function foo_supscr(x:integer):^integer;forward;
function foo_subscr(x:integer):^integer;forward;
function foo_math_type(x:integer):^integer;forward;
function foo_fam(x:integer):^integer;forward;
function foo_left_delimiter(x:integer):^integer;forward;
function foo_right_delimiter(x:integer):^integer;forward;
function foo_small_fam(x:integer):^integer;forward;
function foo_small_char(x:integer):^integer;forward;
function foo_large_fam(x:integer):^integer;forward;
function foo_thickness(x:integer):^integer;forward;
function foo_numerator(x:integer):^integer;forward;
function foo_denominator(x:integer):^integer;forward;
function foo_accent_chr(x:integer):^integer;forward;
function foo_delimiter(x:integer):^integer;forward;
function foo_display_mlist(x:integer):^integer;forward;
function foo_text_mlist(x:integer):^integer;forward;
function foo_script_mlist(x:integer):^integer;forward;
function foo_script_script_mlist(x:integer):^integer;forward;
function foo_cramped_style(x:integer):^integer;forward;
function foo_sub_style(x:integer):^integer;forward;
function foo_sup_style(x:integer):^integer;forward;
function foo_num_style(x:integer):^integer;forward;
function foo_denom_style(x:integer):^integer;forward;
function foo_u_part(x:integer):^integer;forward;
function foo_v_part(x:integer):^integer;forward;
function foo_extra_info(x:integer):^integer;forward;
function foo_fitness(x:integer):^integer;forward;
function foo_break_node(x:integer):^integer;forward;
function foo_line_number(x:integer):^integer;forward;
function foo_total_demerits(x:integer):^integer;forward;
function foo_cur_break(x:integer):^integer;forward;
function foo_prev_break(x:integer):^integer;forward;
function foo_serial(x:integer):^integer;forward;
function foo_next_break(x:integer):^integer;forward;
function foo_trie_link(x:integer):^integer;forward;
function foo_trie_char(x:integer):^integer;forward;
function foo_trie_op(x:integer):^integer;forward;
function foo_broken_ptr(x:integer):^integer;forward;
function foo_trie_back(x:integer):^integer;forward;
function foo_broken_ins(x:integer):^integer;forward;
function foo_last_ins_ptr(x:integer):^integer;forward;
function foo_best_ins_ptr(x:integer):^integer;forward;
function foo_mathex(x:integer):^integer;forward;
function foo_new_hlist(x:integer):^integer;forward;
function foo_if_line_field(x:integer):^integer;forward;
function foo_what_lang(x:integer):^integer;forward;
function foo_what_lhm(x:integer):^integer;forward;
function foo_what_rhm(x:integer):^integer;forward;
function foo_write_tokens(x:integer):^integer;forward;
function foo_write_stream(x:integer):^integer;forward;
function foo_open_name(x:integer):^integer;forward;
function foo_open_area(x:integer):^integer;forward;
function foo_open_ext(x:integer):^integer;forward;
@{ Koniec pseudofunkcji @t@>@}

procedure initialize; {this procedure gets things started properly}
  var @<Local variables for initialization@>@/
  begin @<Initialize whatever \TeX\ might access@>@;
  end;
@z
